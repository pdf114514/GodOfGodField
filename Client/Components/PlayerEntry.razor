<div class="PlayerEntry @($"Team{Player.Team}")" @onclick="() => OnClick?.Invoke(Player)">
    <div class="PlayerTeamIcon" />
    <span class="PlayerName">@Player.Name</span>
    <div class="PlayerState" style="display: @(ShowingMiracles ? "none" : "unset")">
        <div class="PlayerIntegers">
            <span>@L["texts.game.hp"]</span><span>@Player.HP</span>
            <span>@L["texts.game.mp"]</span><span>@Player.MP</span>
            <span>@L["texts.game.cp"]</span><span>@Player.CP</span>
        </div>
        <div class="PlayerCurses">
            <img id="PlayerCurse@(Uuid)Disease" @onmouseover="() => OnMouseOverCurse?.Invoke(Player.Curses.First(x => DiseaseKindCurses.Contains(x[0..1].ToUpper() + x[1..])))">
            <img id="PlayerCurse@(Uuid)Fog" @onmouseover="() => OnMouseOverCurse?.Invoke(ECurse.Fog)">
            <img id="PlayerCurse@(Uuid)Flash" @onmouseover="() => OnMouseOverCurse?.Invoke(ECurse.Flash)">
            <img id="PlayerCurse@(Uuid)Dream" @onmouseover="() => OnMouseOverCurse?.Invoke(ECurse.Dream)">
            <img id="PlayerCurse@(Uuid)Darkcloud" @onmouseover="() => OnMouseOverCurse?.Invoke(ECurse.Darkcloud)">
        </div>
    </div>
    <img id="PlayerGuardian@(Uuid)" @onmouseover="() => OnMouseOverGuardian?.Invoke(Player.Guardian)" style="display: @(ShowingMiracles ? "none" : "unset")" />
    <div class="PlayerMiracles" style="display: @(ShowingMiracles ? "unset" : "none")">
        <!-- why @(Uuid)@(item.Id) errors -->
        @foreach (var item in Player.Items.Where(x => x.Used.HasValue ? x.Used.Value : false)) {
            <img id="PlayerMiracle@(Uuid).@(item.Id)" @onmouseover="() => OnMouseOverMiracle?.Invoke(Resources.GetDataDefinitionByModelId(item.ModelId)!)">
        }
    </div>
</div>

@code {
    static readonly List<string> CurseImages = new() { "Disease", "Fog", "Flash", "Dream", "Darkcloud" };
    static readonly List<string> DiseaseKindCurses = new() { "Cold", "Fever", "Hell", "Heaven" };
    string Uuid = Guid.NewGuid().ToString();
    [Parameter] public required HiddenRoom._Game._Player Player { get; set; }
    [Parameter] public Action<HiddenRoom._Game._Player>? OnClick { get; set; }
    [Parameter] public Action<string>? OnMouseOverCurse { get; set; }
    [Parameter] public Action<string>? OnMouseOverGuardian { get; set; }
    [Parameter] public Action<DataDefinition>? OnMouseOverMiracle { get; set; }
    [Parameter] public bool ShowingMiracles { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        foreach (var cursekv in ECurse.ToDictionary()) {
            if (!Player.Curses.Contains(cursekv.Value) && !IsDiseaseKind(cursekv.Key)) await JS.RemoveImage(JS.GetElementById($"PlayerCurse{Uuid}{cursekv.Key}"));
        }
        if (!Player.Curses.Any(x => IsDiseaseKind(x))) await JS.RemoveImage(JS.GetElementById($"PlayerCurse{Uuid}Disease"));
        if (string.IsNullOrEmpty(Player.Guardian)) await JS.RemoveImage(JS.GetElementById($"PlayerGuardian{Uuid}"));
        else await JS.SetImage(JS.GetElementById($"PlayerGuardian{Uuid}"), new(Resources.GetResource($"images/guardians/small/{Player.Guardian}.png")!));
        foreach (var curse in Player.Curses) {
            await JS.SetImage(JS.GetElementById($"PlayerCurse{Uuid}{(IsDiseaseKind(curse) ? "Disease" : ECurse.ToDictionary().First(x => x.Value == curse).Key)}"), new(Resources.GetResource($"images/curses/small/{curse}.png")!));
        }
        foreach (var item in Player.Items.Where(x => x.Used.HasValue ? x.Used.Value : false)) {
            await JS.SetImage(JS.GetElementById($"PlayerMiracle{Uuid}.{item.Id}"), new(Resources.GetDataDefinitionByModelId(item.ModelId)!.GetImageStream()));
        }
    }

    bool IsDiseaseKind(string curse) => DiseaseKindCurses.Contains(curse[0..1].ToUpper() + curse[1..]);
}