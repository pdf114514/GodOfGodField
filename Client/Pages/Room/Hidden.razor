@page "/rooms/hidden"
@using System.Text.Json

<div class="Hidden">
    <div>
        <div class="LeftSide">
            <span>@L["texts.entry.solo"]</span>
            <div @onclick="() => ButtonEntryTeam(0)" />
        </div>
        <div class="Entries">
            @for (var i = 0; i < 9; i++) {
                @if (Room is not null && Room.Entries is not null && Room.Entries.Count > i) {
                    <!-- <div class="@($"Team{Room.Entries[i].Team}")">@Room.Users.First(x => x.Id == Room.Entries[i].Id).Name</div> -->
                    <PlayerName TeamId="Room.Entries[i].Team" Name="@Room.Users.First(x => x.Id == Room.Entries[i].Id).Name" />
                } else {
                    <PlayerName TeamId="-1" Name="" />
                }
            }
        </div>
        <div class="RightSide">
            <span>@L["texts.entry.teams"]</span>
            <div @onclick="() => ButtonEntryTeam(1)" />
            <div @onclick="() => ButtonEntryTeam(2)" />
            <div @onclick="() => ButtonEntryTeam(3)" />
            <div @onclick="() => ButtonEntryTeam(4)" />
        </div>
    </div>
    <div style="visibility: @(Room is not null && Room.Users.First().Id == AppState.LocalId ? "inherit" : "hidden")">
        <div @onclick="ButtonShuffleTeams">@L["texts.entry.shuffleTeams"]</div>
        <div @onclick="ButtonAddGame">@L["texts.entry.addGame"]</div>
    </div>
</div>

@code {
    // Teams: -1 = No entry
    //        0 = Individual
    //        1 = Green
    //        2 = Red
    //        3 = Yellow
    //        4 = Purple

    HiddenRoom? Room;

    protected override async Task OnInitializedAsync() {
        await JS.SetBackgroundImage(await JS.GetElementByClassName("Content"), new(Resources.GetResource("images.screens.room.png")!));
        try {
            AppState.RoomId = await Api.CreateRoom();
            await Api.AddRoomUser(new() { RoomId = AppState.RoomId, UserName = AppState.UserName });
            try {
                await Firestore.AddTarget($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}");
                await Firestore.AddTarget($"projects/godfield/databases/(default)/documents/modes/hidden/comments/{AppState.RoomId}");
                var channel = await Firestore.GetChannel();
                channel.AddDocumentChangeListener($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}", RoomDocumentChange);
                // channel.AddDocumentDeleteListener($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}", RoomDocumentDelete);
            } catch (Exception e) {
                await JS.CError(e.ToString());
            }
        } catch (Exception e) {
            await JS.CError(e.ToString());
        }
    }

    async void RoomDocumentChange(JsonDocument document) {
        await JS.InvokeVoidAsync("console.dir", document.RootElement.Deserialize<object>());
        var room = new HiddenRoom(document);
        if (room.Game is not null) {
            var channel = await Firestore.GetChannel();
            channel.RemoveAllDocumentChangeListeners();
            channel.RemoveAllDocumentDeleteListeners();
            await Firestore.RemoveAllTargets();
            AppState.HiddenRoomDocument = document;
            Navigation.NavigateTo("/rooms/hidden/game");
        }
        if (Room is null) {
            Room = room;
            StateHasChanged();
            return;
        }

        if (Room.Entries is not null && room.Entries is not null) {
            if (Room.Entries.Count < room.Entries.Count || room.Entries.Any(x => Room.Entries.First(y => y.Id == x.Id).Team != x.Team)) {
                await JS.PlayAudio(new(Resources.GetResource("audio.add-entry-user.mp3")!));
            } else if (Room.Entries.Count > room.Entries.Count) {
                await JS.PlayAudio(new(Resources.GetResource("audio.remove-entry-user.mp3")!));
            }
        }

        Room = room;
        StateHasChanged();
    }

    async void RoomDocumentDelete() {
        // await Api.RemoveRoomUser(); // needed?
        await Firestore.RemoveAllTargets();
        await JS.InvokeVoidAsync("history.back");
    }

    int _TeamId = -1;
    async Task ButtonEntryTeam(int teamId) {
        await JS.PlayAudio(new(Resources.GetResource("audio.click.mp3")!));
        if (teamId == _TeamId) {
            await Api.SetEntryUser(-1);
            _TeamId = -1;
        } else {
            await Api.SetEntryUser(teamId);
            _TeamId = teamId;
        }
    }
    
    async Task ButtonShuffleTeams() {
        await JS.PlayAudio(new(Resources.GetResource("audio.click.mp3")!));
        await Api.ShuffleTeams();
    }

    async Task ButtonAddGame() {
        await JS.PlayAudio(new(Resources.GetResource("audio.click.mp3")!));
        await Api.AddGame();
    }
}