@page "/rooms/hidden/game"
@using System.Collections.Concurrent
@using System.Text.Json

<div class="HiddenGame">
    <div class="UpperSide">
        <div class="ActionMenu">
            @if (IsOpening) {
                <span class="Opening">@((MarkupString)L["texts.game.opening"])</span>
            }
            @if (Debug) {
                <div class="ActionMenuLeftSide">
                    <PlayerName Player=@(new() { Team = 0, Name = "Player1" }) />
                </div>
                <div class="Arrow ToRight" />
                <div class="ActionMenuRightSide">
                    <PlayerName Player=@(new() { Team = 0, Name = "Player2" }) />
                </div>
            }
        </div>
        <div class="PlayerList">
            @if (Players is not null) @foreach (var player in Players) {
                <PlayerEntry Player=player OnMouseOverCurse="OnMouseOverCurse" />
            }
        </div>
    </div>
    <div class="LowerSide">
        <div class="Items">
            @if (LocalPlayer is not null) @foreach (var item in LocalPlayer.Items) {
                <div class="ItemContainer" data-gifted="@IsItemGifted(item).ToString().ToLower()" @onmouseover="() => ShowItemDescription(item)"> <!--  @onmouseout="HideItemDescription" -->
                    <img class="Item" id="@($"Item{item.Id}")">
                    @if (L.GetItemDescription(item.ModelId) is var text && !string.IsNullOrEmpty(text)) {
                        <span class="ItemDescription Element@(L.GetItemElement(item.ModelId) ?? "")">@text</span>
                    } else {
                        <span class="ItemDescription" style="visibility: hidden;" />
                    }
                </div>
            }
        </div>
        @FocusedCard
    </div>
</div>

@code {
    const bool Debug =
    #if DEBUG
        true;
    #else
        false;
    #endif

    bool IsOpening = false;
    bool IsLocalPlayerTurn = true;

    static HiddenGame? _Instance;
    Task? ProcessingEventTask;
    ConcurrentQueue<HiddenRoom._Game._Event> EventQueue = new();

    HiddenRoom? Room;
    List<HiddenRoom._Game._Player>? Players => Room?.Game?.Players;
    HiddenRoom._Game._Player? LocalPlayer => Players?.FirstOrDefault(x => x.UserId == AppState.LocalId);
    RenderFragment? FocusedCard;
    Dictionary<HiddenRoom._Game._Player._Item, Dictionary<string, bool>> ItemStates = new();
    bool IsItemGifted(HiddenRoom._Game._Player._Item item) => ItemStates.TryGetValue(item, out var state) && state["gifted"];

    protected override async Task OnInitializedAsync() {
        _Instance = this;
        ProcessEvent();
        await JS.SetBackgroundImage(await JS.GetElementByClassName("Content"), new(Resources.GetResource("images.screens.room.png")!));
        if (Debug) {
            return;
        }
        try {
            await Firestore.AddTarget($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}");
            await Firestore.AddTarget($"projects/godfield/databases/(default)/documents/modes/hidden/comments/{AppState.RoomId}");
            var channel = await Firestore.GetChannel();
            channel.AddDocumentChangeListener($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}", RoomDocumentChange);
        } catch (Exception e) {
            await JS.CError(e.ToString());
        }
        if (AppState.HiddenRoomDocument is not null) {
            RoomDocumentChange(AppState.HiddenRoomDocument);
            AppState.HiddenRoomDocument = null;
        }
    }

    async void RoomDocumentChange(JsonDocument document) {
        try {
            await JS.InvokeVoidAsync("console.dir", document.RootElement.Deserialize<object>());
            var room = new HiddenRoom(document);
            if (Room is null) Room = room;

            foreach (var e in room.Game!.Events) {
                EventQueue.Enqueue(e);
                Console.WriteLine($"Event added: {e.EventName}");
            }

            Room = room;
            StateHasChanged();
        } catch (Exception e) {
            await JS.CError(e.ToString());
        }
    }

    void ShowItemDescription(HiddenRoom._Game._Player._Item item) {
        if (!IsItemGifted(item) || !(LocalPlayer?.Items.Contains(item) ?? true)) return;
        ShowItemDescription(item.ModelId);
    }

    async void ShowItemDescription(int modelId) {
        // Sometimes fails...
        try {
            FocusedCard = @<ItemCard ItemDataDefinition=Resources.GetDataDefinitionByModelId(modelId) />;
        } catch (Exception e) {
            await JS.CError(e.ToString());
        }
    }

    // void HideItemDescription() => FocusedItemDataDefinition = null;

    void OnMouseOverCurse(string curse) {
        FocusedCard = @<CurseCard Curse=@curse />;
        StateHasChanged();
    }

    void ProcessEvent() {
        if (ProcessingEventTask is not null || !(ProcessingEventTask?.IsCompleted ?? true)) {
            Console.WriteLine($"TASK ALREADY RUNNING: {ProcessingEventTask}, {ProcessingEventTask?.IsCompleted}");
            return;
        }
        if (ProcessingEventTask is not null) return;
        ProcessingEventTask = Task.Run(async () => {
            Console.WriteLine("TASK STARTED");
            while (true) {
                try {
                    if (EventQueue.TryDequeue(out var e)) {
                        Console.WriteLine($"Event: {e.EventName}\n{JsonSerializer.Serialize(e.Json.Deserialize<object>())}");
                        switch (e.EventName) {
                            case "startGame": {
                                await Task.Delay(250);
                                await JS.PlayAudio(new(Resources.GetResource("audio.start-game.mp3")!));
                                IsOpening = true;
                                StateHasChanged();
                                await Task.Delay(1500);
                                continue;
                            }
                            case "gift": {
                                if (e.Json.GetProperty("playerId").GetIntValue() != LocalPlayer?.Id) continue;
                                var eItem = new HiddenRoom._Game._Player._Item(e.Json.GetProperty("item").GetMapFieldsValue());
                                var item = LocalPlayer?.Items.FirstOrDefault(x => x.Id == eItem.Id);
                                if (item is null) {
                                    Console.WriteLine($"Unknown item: {eItem.Id}");
                                    continue;
                                }
                                if (!ItemStates.TryGetValue(item, out var state)) ItemStates[item] = state = new();
                                state["gifted"] = true;
                                StateHasChanged();
                                var dataDef = Resources.GetDataDefinitionByModelId(item.ModelId)!;
                                await JS.SetImage(await JS.GetElementById($"Item{item.Id}"), new(dataDef.GetImageStream()));
                                await JS.PlayAudio(new(Resources.GetResource("audio.gift.mp3")!));
                                await Task.Delay(240);
                                // Console.WriteLine($"Gifted item: {eItem.Id}, {dataDef.Name}, {GetTextUnderItem(item.ModelId)}");
                                continue;
                            }
                            case "advanceTurn": {
                                if (IsOpening) {
                                    IsOpening = false;
                                    StateHasChanged();
                                }
                                var playerId = e.Json.GetProperty("playerId").GetIntValue();
                                continue;
                            }
                            case "debugAddItem": {
                                if (Room is null) Room = new() { Game = new() };
                                if (LocalPlayer is null) Players!.Add(new() { UserId = AppState.LocalId, Name = AppState.UserName });
                                var item = new HiddenRoom._Game._Player._Item() { Id = LocalPlayer!.Items.Count, ModelId = e.Json.GetProperty("modelId").GetInt32() };
                                LocalPlayer!.Items.Add(item);
                                if (!ItemStates.TryGetValue(item, out var state)) ItemStates[item] = state = new();
                                state["gifted"] = true;
                                StateHasChanged();
                                var dataDef = Resources.GetDataDefinitionByModelId(item.ModelId)!;
                                await JS.SetImage(await JS.GetElementById($"Item{item.Id}"), new(dataDef.GetImageStream()));
                                await JS.PlayAudio(new(Resources.GetResource("audio.gift.mp3")!));
                                continue;
                            }
                            case "debugFocusItemDefinition": {
                                var modelId = e.Json.GetProperty("modelId").GetInt32();
                                ShowItemDescription(modelId);
                                StateHasChanged();
                                continue;
                            }
                            case "debugAddCurse": {
                                LocalPlayer?.Curses.Add(e.Json.GetProperty("curse").GetString()!);
                                StateHasChanged();
                                continue;
                            }
                            case "debugRemoveCurse": {
                                LocalPlayer?.Curses.Remove(e.Json.GetProperty("curse").GetString()!);
                                StateHasChanged();
                                continue;
                            }
                            case "debugSetGuardian": {
                                if (LocalPlayer is not null) {
                                    LocalPlayer.Guardian = e.Json.GetProperty("guardian").GetString()!;
                                    StateHasChanged();
                                }
                                continue;
                            }
                            default: {
                                Console.WriteLine($"Unknown event: {e.EventName}");
                                continue;
                            }
                        }
                    } else {
                        // any better ways?
                        await Task.Delay(100);
                    }
                } catch (Exception e) {
                    await JS.CError(e.ToString());
                }
            }
        });
    }

    // for debug
    [JSInvokable]
    public static void EnqueueEvent(string eventJson) {
        if (_Instance is null) return;
        _Instance.EventQueue.Enqueue(new(JsonSerializer.Deserialize<JsonElement>(eventJson)));
        _Instance.ProcessEvent();
    }
}