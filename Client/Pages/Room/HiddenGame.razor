@page "/rooms/hidden/game"
@using System.Collections.Concurrent
@using System.Text.Json

<div class="HiddenGame">
    <div class="UpperSide">
        <div class="ActionMenu">
            @if (IsOpening) {
                <span class="Opening">@((MarkupString)L["texts.game.opening"])</span>
            }
        </div>
        <div class="PlayerList">
            @if (Debug) {
                <div class="Team0">
                    <span>m2</span>
                    <span>@L["texts.game.hp"] <span>00</span></span>
                    <span>@L["texts.game.mp"] <span>00</span></span>
                    <span>@L["texts.game.cp"] <span>00</span></span>
                </div>
                <div class="Team0">
                    <span>USER2</span>
                    <span>@L["texts.game.hp"] <span>00</span></span>
                    <span>@L["texts.game.mp"] <span>00</span></span>
                    <span>@L["texts.game.cp"] <span>00</span></span>
                </div>
            }
            @if (Players is not null) @foreach (var player in Players) {
                <div class="@($"Team{player.Team}")">
                    <span>@player.Name</span>
                    <span>@L["texts.game.hp"] <span>@player.HP</span></span>
                    <span>@L["texts.game.mp"] <span>@player.MP</span></span>
                    <span>@L["texts.game.cp"] <span>@player.CP</span></span>
                </div>
            }
        </div>
    </div>
    <div class="LowerSide">
        <div class="Items">
            @if (Debug) {
                <div class="ItemContainer" data-gifted="false" @onmouseover="() => ShowItemDescription(0)" @onmouseout="HideItemDescription">
                    <img class="Item" id="TestItem1">
                    <span class="ItemUnderText">@L["texts.game.atk"].Replace("{{atk}}", 30.ToString())</span>
                </div>
            }
            @if (LocalPlayer is not null) @foreach (var item in LocalPlayer.Items) {
                <div class="ItemContainer" data-gifted="@IsItemGifted(item).ToString().ToLower()" @onmouseover="() => ShowItemDescription(item)" @onmouseout="HideItemDescription">
                    <img class="Item" id="@($"Item{item.Id}")">
                    <span class="ItemUnderText">@L["texts.game.atk"].Replace("{{atk}}", 99.ToString())</span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    const bool Debug =
    #if DEBUG
        false;
    #else
        false;
    #endif

    bool IsOpening = false;

    static HiddenGame? _Instance;
    Task? ProcessingEventTask;
    ConcurrentQueue<HiddenRoom._Game._Event> EventQueue = new();

    HiddenRoom? Room;
    List<HiddenRoom._Game._Player>? Players => Room?.Game?.Players;
    HiddenRoom._Game._Player? LocalPlayer => Players?.FirstOrDefault(x => x.UserId == AppState.LocalId);
    Dictionary<HiddenRoom._Game._Player._Item, Dictionary<string, bool>> ItemStates = new();
    bool IsItemGifted(HiddenRoom._Game._Player._Item item) => ItemStates.TryGetValue(item, out var state) && state["gifted"];

    protected override async Task OnInitializedAsync() {
        _Instance = this;
        ProcessEvent();
        await JS.SetBackgroundImage(await JS.GetElementByClassName("Content"), new(Resources.GetResource("images.screens.room.png")!));
        if (Debug) {
            await JS.SetImage(await JS.GetElementById("TestItem1"), new(Resources.GetResource("images.items.weapons.god-sword.png")!));
            return;
        }
        try {
            await Firestore.AddTarget($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}");
            await Firestore.AddTarget($"projects/godfield/databases/(default)/documents/modes/hidden/comments/{AppState.RoomId}");
            var channel = await Firestore.GetChannel();
            channel.AddDocumentChangeListener($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}", RoomDocumentChange);
        } catch (Exception e) {
            Console.WriteLine(e);
            await JS.CError(e.ToString());
        }
        if (AppState.HiddenRoomDocument is not null) {
            RoomDocumentChange(AppState.HiddenRoomDocument);
            AppState.HiddenRoomDocument = null;
        }
    }

    async void RoomDocumentChange(JsonDocument document) {
        await JS.InvokeVoidAsync("console.dir", document.RootElement.Deserialize<object>());
        var room = new HiddenRoom(document);
        if (Room is null) Room = room;

        foreach (var e in room.Game!.Events) {
            Console.WriteLine($"Event added: {e.EventName}");
            EventQueue.Enqueue(e);
        }

        Room = room;
        StateHasChanged();
    }

    void ShowItemDescription(HiddenRoom._Game._Player._Item item) => ShowItemDescription(item.ModelId);
    async void ShowItemDescription(int modelId) {
        await JS.InvokeVoidAsync("console.log", "ShowItemDescription");
    }

    async void HideItemDescription() {
        await JS.InvokeVoidAsync("console.log", "HideItemDescription");
    }

    void ProcessEvent() {
        if (ProcessingEventTask is not null || !(ProcessingEventTask?.IsCompleted ?? true)) {
            Console.WriteLine($"TASK ALREADY RUNNING: {ProcessingEventTask}, {ProcessingEventTask?.IsCompleted}");
            return;
        }
        if (ProcessingEventTask is not null) return;
        ProcessingEventTask = Task.Run(async () => {
            Console.WriteLine("TASK STARTED");
            while (true) {
                if (EventQueue.TryDequeue(out var e)) {
                    Console.WriteLine($"Event: {e.EventName}\n{JsonSerializer.Serialize(e.Json.Deserialize<object>())}");
                    switch (e.EventName) {
                        case "startGame": {
                            await Task.Delay(250);
                            await JS.PlayAudio(new(Resources.GetResource("audio.start-game.mp3")!));
                            IsOpening = true;
                            StateHasChanged();
                            await Task.Delay(1500);
                            continue;
                        }
                        case "gift": {
                            if (e.Json.GetProperty("playerId").GetIntValue() != LocalPlayer?.Id) continue;
                            var eItem = new HiddenRoom._Game._Player._Item(e.Json.GetProperty("item").GetMapFieldsValue());
                            var item = LocalPlayer?.Items.FirstOrDefault(x => x.Id == eItem.Id);
                            if (item is null) {
                                Console.WriteLine($"Unknown item: {eItem.Id}");
                                continue;
                            }
                            if (!ItemStates.TryGetValue(item, out var state)) ItemStates[item] = state = new();
                            state["gifted"] = true;
                            StateHasChanged();
                            await JS.SetImage(await JS.GetElementById($"Item{item.Id}"), new(Resources.GetResource("images.items.weapons.god-sword.png")!));
                            await JS.PlayAudio(new(Resources.GetResource("audio.gift.mp3")!));
                            await Task.Delay(240);
                            Console.WriteLine($"Gifted item: {eItem.Id}");
                            continue;
                        }
                        case "advanceTurn": {
                            if (IsOpening) {
                                IsOpening = false;
                                StateHasChanged();
                            }
                            var playerId = e.Json.GetProperty("playerId").GetIntValue();
                            continue;
                        }
                        default: {
                            Console.WriteLine($"Unknown event: {e.EventName}");
                            continue;
                        }
                    }
                } else {
                    // any better ways?
                    await Task.Delay(100);
                }
            }
        });
    }

    // for debug
    [JSInvokable]
    public static void EnqueueEvent(string eventJson) {
        if (_Instance is null) return;
        _Instance.EventQueue.Enqueue(new(JsonSerializer.Deserialize<JsonElement>(eventJson)));
        _Instance.ProcessEvent();
    }
}