@page "/rooms/hidden/game"
@using System.Text.Json

<div class="HiddenGame">
    <div class="UpperSide">
        <div class="ActionMenu">
            @if (IsOpening) {
                <span class="Opening">@((MarkupString)L["texts.game.opening"])</span>
            }
        </div>
        <div class="PlayerList">
            <div class="Team0">
                <span>m2</span>
                <span>@L["texts.game.hp"] <span>00</span></span>
                <span>@L["texts.game.mp"] <span>00</span></span>
                <span>@L["texts.game.cp"] <span>00</span></span>
            </div>
            <div class="Team0">
                <span>USER2</span>
                <span>@L["texts.game.hp"] <span>00</span></span>
                <span>@L["texts.game.mp"] <span>00</span></span>
                <span>@L["texts.game.cp"] <span>00</span></span>
            </div>
        </div>
    </div>
    <div class="LowerSide"></div>
</div>

@code {
    bool IsOpening = false;

    static HiddenGame? _Instance;
    Task? ProcessingEventTask;
    Queue<HiddenRoom._Game._Event> EventQueue = new();

    HiddenRoom? Room;
    List<HiddenRoom._Game._Player>? Players => Room?.Game?.Players;

    protected override async Task OnInitializedAsync() {
        _Instance = this;
        await JS.SetBackgroundImage(await JS.GetElementByClassName("Content"), new(Resources.GetResource("images.screens.room.png")!));
        #if DEBUG
        return;
        #endif
        try {
            await Firestore.AddTarget($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}");
            await Firestore.AddTarget($"projects/godfield/databases/(default)/documents/modes/hidden/comments/{AppState.RoomId}");
            var channel = await Firestore.GetChannel();
            channel.AddDocumentChangeListener($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}", RoomDocumentChange);
        } catch (Exception e) {
            Console.WriteLine(e);
            await JS.CError(e.ToString());
        }
        if (AppState.HiddenRoomDocument is not null) {
            RoomDocumentChange(AppState.HiddenRoomDocument);
            AppState.HiddenRoomDocument = null;
        }
    }

    async void RoomDocumentChange(JsonDocument document) {
        await JS.InvokeVoidAsync("console.dir", document.RootElement.Deserialize<object>());
        var room = new HiddenRoom(document);
        if (Room is null) {
            Room = room;
        }

        foreach (var e in Room.Game!.Events) EventQueue.Enqueue(e);
        ProcessEvent();

        Room = room;
        StateHasChanged();
    }

    void ProcessEvent() {
        if (ProcessingEventTask is not null) return;
        ProcessingEventTask = Task.Run(async () => {
            while (EventQueue.Count > 0) {
                var e = EventQueue.Dequeue();
                switch (e.EventName) {
                    case "startGame": {
                        await JS.PlayAudio(new(Resources.GetResource("audio.start-game.mp3")!));
                        IsOpening = true;
                        StateHasChanged();
                        await Task.Delay(1500);
                        break;
                    }
                    case "gift": {
                        await JS.PlayAudio(new(Resources.GetResource("audio.gift.mp3")!));
                        await Task.Delay(250);
                        break;
                    }
                    default: {
                        Console.WriteLine($"Unknown event: {e.EventName}\n{e.Json.GetRawText()}");
                        break;
                    }
                }
            }
            ProcessingEventTask = null;
        });
    }

    // for debug
    [JSInvokable]
    public static void EnqueueEvent(string eventJson) {
        if (_Instance is null) return;
        _Instance.EventQueue.Enqueue(new(JsonSerializer.Deserialize<JsonElement>(eventJson)));
        _Instance.ProcessEvent();
    }
}