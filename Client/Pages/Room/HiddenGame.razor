@page "/rooms/hidden/game"
@using System.Collections.Concurrent
@using System.Text.Json

<div class="HiddenGame">
    <div class="UpperSide">
        <div class="ActionMenu">
            @if (IsOpening) {
                <span class="Opening">@((MarkupString)L["texts.game.opening"])</span>
            }
            @if (Debug) {
                <div class="ActionMenuLeftSide">
                    <div class="Team0">USER</div>
                </div>
                <div class="Arrow ToRight" />
                <div class="ActionMenuRightSide">
                    <div class="Team0">ENEMY</div>
                </div>
            }
        </div>
        <div class="PlayerList">
            @if (Players is not null) @foreach (var player in Players) {
                <div class="@($"Team{player.Team}")">
                    <span>@player.Name</span>
                    <span>@L["texts.game.hp"] <span>@player.HP</span></span>
                    <span>@L["texts.game.mp"] <span>@player.MP</span></span>
                    <span>@L["texts.game.cp"] <span>@player.CP</span></span>
                </div>
            }
        </div>
    </div>
    <div class="LowerSide">
        <div class="Items">
            @if (LocalPlayer is not null) @foreach (var item in LocalPlayer.Items) {
                <div class="ItemContainer" data-gifted="@IsItemGifted(item).ToString().ToLower()" @onmouseover="() => ShowItemDescription(item)"> <!--  @onmouseout="HideItemDescription" -->
                    <img class="Item" id="@($"Item{item.Id}")">
                    @if (GetItemDescription(item.ModelId) is var text && !string.IsNullOrEmpty(text)) {
                        <span class="ItemDescription Element@(GetItemElement(item.ModelId) ?? "")">@text</span>
                    } else {
                        <span class="ItemDescription" style="visibility: hidden;" />
                    }
                </div>
            }
        </div>
        <div class="ItemCardContainer">
            @if (FocusedItemDataDefinition is not null) {
                <div class="ItemCard">
                    <img id="FocusedItemCard" />
                    <span class="Element@(GetItemElement(FocusedItemDataDefinition) ?? "")">@FocusedItemDataDefinition.Name</span>
                    <!-- TODO show description text, atk, def, abilityValue or something and price, miracle's cost, ... -->
                    <span class="Element@(GetItemElement(FocusedItemDataDefinition) ?? "")">@GetItemShortInformation(FocusedItemDataDefinition)</span>
                    <span class="Element@(GetItemElement(FocusedItemDataDefinition) ?? "")">@GetItemInformation(FocusedItemDataDefinition)</span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    const bool Debug =
    #if DEBUG
        true;
    #else
        false;
    #endif

    bool IsOpening = false;
    bool IsLocalPlayerTurn = true;

    static HiddenGame? _Instance;
    Task? ProcessingEventTask;
    ConcurrentQueue<HiddenRoom._Game._Event> EventQueue = new();

    HiddenRoom? Room;
    List<HiddenRoom._Game._Player>? Players => Room?.Game?.Players;
    HiddenRoom._Game._Player? LocalPlayer => Players?.FirstOrDefault(x => x.UserId == AppState.LocalId);
    DataDefinition? FocusedItemDataDefinition;
    Dictionary<HiddenRoom._Game._Player._Item, Dictionary<string, bool>> ItemStates = new();
    bool IsItemGifted(HiddenRoom._Game._Player._Item item) => ItemStates.TryGetValue(item, out var state) && state["gifted"];

    protected override async Task OnInitializedAsync() {
        _Instance = this;
        ProcessEvent();
        await JS.SetBackgroundImage(await JS.GetElementByClassName("Content"), new(Resources.GetResource("images.screens.room.png")!));
        if (Debug) {
            return;
        }
        try {
            await Firestore.AddTarget($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}");
            await Firestore.AddTarget($"projects/godfield/databases/(default)/documents/modes/hidden/comments/{AppState.RoomId}");
            var channel = await Firestore.GetChannel();
            channel.AddDocumentChangeListener($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}", RoomDocumentChange);
        } catch (Exception e) {
            await JS.CError(e.ToString());
        }
        if (AppState.HiddenRoomDocument is not null) {
            RoomDocumentChange(AppState.HiddenRoomDocument);
            AppState.HiddenRoomDocument = null;
        }
    }

    async void RoomDocumentChange(JsonDocument document) {
        try {
            await JS.InvokeVoidAsync("console.dir", document.RootElement.Deserialize<object>());
            var room = new HiddenRoom(document);
            if (Room is null) Room = room;

            foreach (var e in room.Game!.Events) {
                EventQueue.Enqueue(e);
                Console.WriteLine($"Event added: {e.EventName}");
            }

            Room = room;
            StateHasChanged();
        } catch (Exception e) {
            await JS.CError(e.ToString());
        }
    }

    void ShowItemDescription(HiddenRoom._Game._Player._Item item) {
        if (!IsItemGifted(item) || !(LocalPlayer?.Items.Contains(item) ?? true)) return;
        ShowItemDescription(item.ModelId);
    }

    async void ShowItemDescription(int modelId) {
        // Sometimes fails...
        try {
            FocusedItemDataDefinition = Resources.GetDataDefinitionByModelId(modelId)!;
            await JS.SetImage(await JS.GetElementById("FocusedItemCard"), new(FocusedItemDataDefinition.GetImageStream()));
        } catch (Exception e) {
            await JS.CError(e.ToString());
        }
    }

    // void HideItemDescription() => FocusedItemDataDefinition = null;

    string? GetItemDescription(int modelId) {
        var dataDef = Resources.GetDataDefinitionByModelId(modelId);
        if (dataDef is null) return null;
        if (dataDef.IsArmor(out var armor)) return L["texts.game.def"].Replace("{{def}}", armor.Def.ToString());
        else if (dataDef.IsWeapon(out var weapon)) {
            var text = L[$"texts.game.{(weapon.IsPlusAtk ? "plusAtk" : "atk")}"].Replace("{{atk}}", weapon.Atk.ToString());
            if (weapon.HitRate != 0) text = L["texts.game.hitRate"].Replace("{{hitRate}}", weapon.HitRate.ToString()) + text;
            return text;
        }
        return null;
    }

    string? GetItemElement(int modelId) => GetItemElement(Resources.GetDataDefinitionByModelId(modelId));
    string? GetItemElement(DataDefinition? dataDef) {
        if (dataDef is null) return null;
        if (dataDef.IsArmor(out var armor)) return armor.Element?[0..1].ToUpper() + armor.Element?[1..];
        else if (dataDef.IsWeapon(out var weapon)) return weapon.Element?[0..1].ToUpper() + weapon.Element?[1..];
        return null;
    }

    string? GetItemShortInformation(int modelId) => GetItemShortInformation(Resources.GetDataDefinitionByModelId(modelId));
    string? GetItemShortInformation(DataDefinition? dataDef) {
        if (dataDef is null) return null;
        if (dataDef.IsArmor(out var armor)) {
            if (armor.Def == 0) return null;
            return armor.Ability switch {
                EAbility.CounterAtk
                    or EAbility.Counter2xAtk
                    or EAbility.CounterCurse
                    or EAbility.CounterBoost2xMP
                    or EAbility.CounterTakeCP => L["texts.game.counter"],
                _ => L["texts.game.def"].Replace("{{def}}", armor.Def.ToString())
            };
        } else if (dataDef.IsWeapon(out var weapon)) {
            if (weapon.Ability == EAbility.AtkBy2xMP) return L["texts.game.atkBy2xMP"];
            var text = L[$"texts.game.{(weapon.IsPlusAtk ? "plusAtk" : "atk")}"].Replace("{{atk}}", weapon.Atk.ToString());
            if (weapon.HitRate != 0) text = L["texts.game.hitRate"].Replace("{{hitRate}}", weapon.HitRate.ToString()) + text;
            return text;
        } else if (dataDef.IsSundry(out var sundry)) {
            return sundry.Ability switch {
                EAbility.BoostHP => L["texts.abilities.boostHP"].Replace("{{hp}}", sundry.AbilityValue.ToString()),
                EAbility.BoostHPOrDealDamage => L["texts.abilities.boostHP"].Replace("{{hp}}", sundry.AbilityValue.ToString()),
                EAbility.BoostMP => L["texts.abilities.boostMP"].Replace("{{mp}}", sundry.AbilityValue.ToString()),
                EAbility.BoostMPAndAddCurse => L["texts.abilities.boostMP"].Replace("{{mp}}", sundry.AbilityValue.ToString()),
                _ => null
            };
        } else if (dataDef.IsMiracle(out var miracle)) {
            if (miracle.Atk != 0) {
                var text = L[$"texts.game.{(miracle.IsPlusAtk ? "plusAtk" : "atk")}"].Replace("{{atk}}", miracle.Atk.ToString());
                if (miracle.HitRate != 0) text = L["texts.game.hitRate"].Replace("{{hitRate}}", miracle.HitRate.ToString()) + text;
                return text;
            }
            return miracle.Ability switch {
                EAbility.AddCurse => L[$"texts.curseNames.{miracle.Curse}"],
                EAbility.BoostCP => L["texts.abilities.boostCP"].Replace("{{cp}}", miracle.AbilityValue.ToString()),
                EAbility.BoostHP => L["texts.abilities.boostHP"].Replace("{{hp}}", miracle.AbilityValue.ToString()),
                _ => null
            };
        } else if (dataDef.IsGuardian(out var guardian)) {
            if (guardian.Atk != 0) {
                var text = L["texts.game.atk"].Replace("{{atk}}", guardian.Atk.ToString());
                if (guardian.HitRate != 0) text = L["texts.game.hitRate"].Replace("{{hitRate}}", guardian.HitRate.ToString()) + text;
                return text;
            }
            return guardian.Ability switch {
                EAbility.AddCurse => L[$"texts.curseNames.{guardian.Curse}"],
                EAbility.BoostCP
                    or EAbility.BoostCPOfEverybody
                    or EAbility.BoostCPToEnemy => L["texts.abilities.boostCP"].Replace("{{cp}}", guardian.AbilityValue.ToString()),
                EAbility.BoostHP => L["texts.abilities.boostHP"].Replace("{{hp}}", guardian.AbilityValue.ToString()),
                EAbility.BoostMP => L["texts.abilities.boostMP"].Replace("{{mp}}", guardian.AbilityValue.ToString()),
                EAbility.TakeCP => L["texts.abilities.takeCP"].Replace("{{cp}}", guardian.AbilityValue.ToString()),
                _ => null
            };
        } else if (dataDef.IsPhenomena(out var phenomena)) {
            if (phenomena.Atk != 0) {
                var text = L["texts.game.atk"].Replace("{{atk}}", phenomena.Atk.ToString());
                if (phenomena.HitRate != 0) text = L["texts.game.hitRate"].Replace("{{hitRate}}", phenomena.HitRate.ToString()) + text;
                return text;
            }
            return phenomena.Ability switch {
                EAbility.BoostHP => L["texts.abilities.boostHP"].Replace("{{hp}}", phenomena.AbilityValue.ToString()),
                _ => null
            };
        } else if (dataDef.IsDevil(out var devil)) {
            return devil.Ability switch {
                EAbility.DealDamage => L["texts.abilities.dealDamage"].Replace("{{damage}}", devil.AbilityValue.ToString()),
                _ => null
            };
        } else if (dataDef.IsTrade(out _)) return null;
        return null;
    }

    string? GetItemInformation(int modelId) => GetItemInformation(Resources.GetDataDefinitionByModelId(modelId));
    string? GetItemInformation(DataDefinition? dataDef) {
        if (dataDef is null) return null;
        if (dataDef.IsArmor(out var armor)) {
            if (armor.Atk != 0) {
                var text = L[$"texts.game.{(armor.IsPlusAtk ? "plusAtk" : "atk")}"].Replace("{{atk}}", armor.Atk.ToString());
                if (armor.HitRate != 0) text = L["texts.game.hitRate"].Replace("{{hitRate}}", armor.HitRate.ToString()) + text;
                return text;
            }
            return armor.Ability switch {
                EAbility.BlockMiracle => L["texts.abilities.blockMiracle"],
                EAbility.BounceMiracle => L["texts.abilities.bounceMiracle"],
                EAbility.Counter2xAtk => armor.HitRate == 0 ? L["texts.abilities.counter2xAtk"] : L["texts.game.hitRate"].Replace("{{hitRate}}", armor.HitRate.ToString()) + L["texts.abilities.counter2xAtk"],
                EAbility.CounterAtk => armor.HitRate == 0 ? L["texts.abilities.counterAtk"] : L["texts.game.hitRate"].Replace("{{hitRate}}", armor.HitRate.ToString()) + L["texts.abilities.counterAtk"],
                EAbility.CounterBoost2xMP => L["texts.abilities.counterBoost2xMP"],
                EAbility.CounterCurse => L[$"texts.curseNames.{armor.Curse}"],
                EAbility.CounterTakeCP => L["texts.abilities.counterTakeCP"],
                EAbility.CutCost => L["texts.abilities.cutCost"],
                EAbility.FilterAtkElement => L["texts.abilities.filterAtkElement"],
                EAbility.ReflectAnything => L["texts.abilities.reflectAnything"],
                EAbility.ReflectMiracle => L["texts.abilities.reflectMiracle"],
                EAbility.SelfCurse => L["texts.abilities.selfCurse"].Replace("{{curse}}", L[$"texts.curseNames.{armor.Curse}"]),
                EAbility.SelfCurseAndRedraw => L["texts.abilities.selfCurseAndRedraw"].Replace("{{curse}}", L[$"texts.curseNames.{armor.Curse}"]),
                _ => null
            };
        } else if (dataDef.IsWeapon(out var weapon)) {
            if (weapon.Def != 0) return L["texts.game.def"].Replace("{{def}}", weapon.Def.ToString());
            return weapon.Ability switch {
                EAbility.AddCurseOnDamage => L["texts.abilities.addCurseOnDamage"].Replace("{{curse}}", L[$"texts.curseNames.{weapon.Curse}"]),
                EAbility.AtkBy2xMP => L["texts.abilities.consumeAllMP"],
                EAbility.Danger => L["texts.abilities.attackSomebody"],
                EAbility.SetElement => L["texts.abilities.setElement"].Replace("{{element}}", L[$"texts.elementNames.{weapon.Element}"]),
                _ => weapon.Ability is null ? null : L[$"texts.abilities.{weapon.Ability}"]
            };
        } else if (dataDef.IsSundry(out var sundry)) {
            if (sundry.Atk != 0) {
                var text = L[$"texts.game.{(sundry.IsPlusAtk ? "plusAtk" : "atk")}"].Replace("{{atk}}", sundry.Atk.ToString());
                // if (sundry.HitRate != 0) text = L["texts.game.hitRate"].Replace("{{hitRate}}", sundry.HitRate.ToString()) + text;
                return text;
            }
            return sundry.Ability switch {
                EAbility.BoostHPOrDealDamage => L["texts.abilities.orDealDamage"].Replace("{{damage}}", sundry.AbilityValue.ToString()),
                EAbility.BoostMPAndAddCurse => L[$"texts.curseNames.{sundry.Curse}"],
                EAbility.Revive => L["texts.abilities.revive"].Replace("{{hp}}", sundry.AbilityValue.ToString()),
                _ => sundry.Ability is null ? null : L[$"texts.abilities.{sundry.Ability}"]
            };
        } else if (dataDef.IsMiracle(out var miracle)) {
            if (miracle.Atk == 0 && miracle.Ability == EAbility.AddCurse) return null;
            return miracle.Ability switch {
                EAbility.AddCurseOnDamage => L["texts.abilities.addCurseOnDamage"].Replace("{{curse}}", L[$"texts.curseNames.{miracle.Curse}"]),
                _ => miracle.Ability is null ? null : L[$"texts.abilities.{miracle.Ability}"]
            };
        } else if (dataDef.IsGuardian(out var guardian)) {
            return guardian.Ability switch {
                EAbility.AddCurseOnDamage => L["texts.abilities.addCurseOnDamage"].Replace("{{curse}}", L[$"texts.curseNames.{guardian.Curse}"]),
                EAbility.CategoryWeapons => null,
                _ => guardian.Ability is null ? null : L[$"texts.abilities.{guardian.Ability}"]
            };
        } else if (dataDef.IsPhenomena(out var phenomena)) {
            return phenomena.Ability switch {
                EAbility.SetCurseOfEverybody => L["texts.abilities.setCurseOfEverybody"].Replace("{{curse}}", L[$"texts.curseNames.{phenomena.Curse}"]),
                EAbility.SetHPOfEverybody => L["texts.abilities.setHPOfEverybody"].Replace("{{hp}}", phenomena.AbilityValue.ToString()),
                _ => phenomena.Ability is null ? null : L[$"texts.abilities.{phenomena.Ability}"]
            };
        } else if (dataDef.IsDevil(out var devil)) {
            return devil.Ability is null ? null : L[$"texts.abilities.{devil.Ability}"];
        } else if (dataDef.IsTrade(out var trade)) {
            return trade.Ability is null ? null : L[$"texts.abilities.{trade.Ability}"];
        }
        return null;
    }

    void ProcessEvent() {
        if (ProcessingEventTask is not null || !(ProcessingEventTask?.IsCompleted ?? true)) {
            Console.WriteLine($"TASK ALREADY RUNNING: {ProcessingEventTask}, {ProcessingEventTask?.IsCompleted}");
            return;
        }
        if (ProcessingEventTask is not null) return;
        ProcessingEventTask = Task.Run(async () => {
            Console.WriteLine("TASK STARTED");
            while (true) {
                try {
                    if (EventQueue.TryDequeue(out var e)) {
                        Console.WriteLine($"Event: {e.EventName}\n{JsonSerializer.Serialize(e.Json.Deserialize<object>())}");
                        switch (e.EventName) {
                            case "startGame": {
                                await Task.Delay(250);
                                await JS.PlayAudio(new(Resources.GetResource("audio.start-game.mp3")!));
                                IsOpening = true;
                                StateHasChanged();
                                await Task.Delay(1500);
                                continue;
                            }
                            case "gift": {
                                if (e.Json.GetProperty("playerId").GetIntValue() != LocalPlayer?.Id) continue;
                                var eItem = new HiddenRoom._Game._Player._Item(e.Json.GetProperty("item").GetMapFieldsValue());
                                var item = LocalPlayer?.Items.FirstOrDefault(x => x.Id == eItem.Id);
                                if (item is null) {
                                    Console.WriteLine($"Unknown item: {eItem.Id}");
                                    continue;
                                }
                                if (!ItemStates.TryGetValue(item, out var state)) ItemStates[item] = state = new();
                                state["gifted"] = true;
                                StateHasChanged();
                                var dataDef = Resources.GetDataDefinitionByModelId(item.ModelId)!;
                                await JS.SetImage(await JS.GetElementById($"Item{item.Id}"), new(dataDef.GetImageStream()));
                                await JS.PlayAudio(new(Resources.GetResource("audio.gift.mp3")!));
                                await Task.Delay(240);
                                // Console.WriteLine($"Gifted item: {eItem.Id}, {dataDef.Name}, {GetTextUnderItem(item.ModelId)}");
                                continue;
                            }
                            case "advanceTurn": {
                                if (IsOpening) {
                                    IsOpening = false;
                                    StateHasChanged();
                                }
                                var playerId = e.Json.GetProperty("playerId").GetIntValue();
                                continue;
                            }
                            default: {
                                Console.WriteLine($"Unknown event: {e.EventName}");
                                continue;
                            }
                        }
                    } else {
                        // any better ways?
                        await Task.Delay(100);
                    }
                } catch (Exception e) {
                    await JS.CError(e.ToString());
                }
            }
        });
    }

    // for debug
    [JSInvokable]
    public static void EnqueueEvent(string eventJson) {
        if (_Instance is null) return;
        _Instance.EventQueue.Enqueue(new(JsonSerializer.Deserialize<JsonElement>(eventJson)));
        _Instance.ProcessEvent();
    }
}