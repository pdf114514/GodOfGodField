@page "/rooms/hidden/game"
@using System.Collections.Concurrent
@using System.Text.Json

<div class="HiddenGame">
    <div class="UpperSide">
        <div class="ActionMenu">
            @if (IsOpening) {
                <span class="Opening">@((MarkupString)L["texts.game.opening"])</span>
            }
            <div class="ActionMenuLeftSide">
                <PlayerName Player=TurnPlayer />
                <PlayerActionField Player=TurnPlayer TextVisible=true SelectedItems=TurnPlayerSelectedItems OnClick="TurnPlayerActionFieldClick" OnMouseOverItem="ShowItemDescription" @ref="ActionFieldLeftSide" />
            </div>
            <div class="Arrow" data-direction="@ArrowDirection.ToString()" />
            <div class="ActionMenuRightSide">
                <PlayerName Player=TargetPlayer />
                <PlayerActionField Player=TargetPlayer TextVisible=true SelectedItems=TargetPlayerSelectedItems OnClick="TargetPlayerActionFieldClick" OnMouseOverItem="ShowItemDescription" @ref="ActionFieldRightSide" />
            </div>
    </div>
        <div class="PlayerList">
            @if (Players is not null) @foreach (var player in Players) {
                <PlayerEntry Player=player OnMouseOverCurse="OnMouseOverCurse" OnMouseOverGuardian="OnMouseOverGuardian" OnMouseOverMiracle="OnMouseOverMiracle" OnClick="OnPlayerEntryClick" ShowingMiracles=ShowingMiracles />
            }
        </div>
    </div>
    <div class="LowerSide">
        <div class="Items">
            @if (LocalPlayer is not null) @foreach (var item in LocalPlayer.Items) {
                <ItemContainer ItemGifted=IsItemGifted(item) Selected=@(Attacking ? TurnPlayerSelectedItems.Contains(item) : Defending ? TargetPlayerSelectedItems.Contains(item) : false) ShowingCP=ShowingCP Item=item OnMouseOver="ShowItemDescription" OnClick="ItemClick" />
            }
        </div>
        <div>
            <div class="ButtonToggleShowingMiracles" @onclick="ToggleShowingMiracles">❊ @L["texts.game.usedMiracles"]</div>
            @FocusedCard
        </div>
    </div>
</div>

@code {
    const bool Debug =
    #if DEBUG
        true;
    #else
        false;
    #endif

    bool IsOpening = false;
    bool ShowingMiracles = false;
    bool ShowingCP = false;
    int TurnPlayerId = -1;
    int TargetPlayerId = -1;
    char ArrowDirection = ' ';

    static HiddenGame? _Instance;
    Task? ProcessingEventTask;
    ConcurrentQueue<HiddenRoom._Game._Event> EventQueue = new();

    HiddenRoom? Room;
    List<HiddenRoom._Game._Player>? Players => Room?.Game?.Players;
    HiddenRoom._Game._Player? LocalPlayer => Players?.FirstOrDefault(x => x.UserId == AppState.LocalId);
    HiddenRoom._Game._Player? TargetPlayer => Players?.FirstOrDefault(x => x.Id == TargetPlayerId);
    HiddenRoom._Game._Player? TurnPlayer => Players?.FirstOrDefault(x => x.Id == TurnPlayerId);
    bool SelectingItems = true;
    bool Attacking => SelectingItems && TurnPlayerId == LocalPlayer?.Id;
    bool Defending => SelectingItems && TargetPlayerId == LocalPlayer?.Id;
    bool IsLocalPlayerTurn => Attacking || Defending;
    RenderFragment? FocusedCard;
    PlayerActionField ActionFieldLeftSide = default!;
    PlayerActionField ActionFieldRightSide = default!;
    List<HiddenRoom._Game._Player._Item> TurnPlayerSelectedItems = new();
    List<HiddenRoom._Game._Player._Item> TargetPlayerSelectedItems = new();
    Dictionary<HiddenRoom._Game._Player._Item, Dictionary<string, bool>> ItemStates = new();
    bool IsItemGifted(HiddenRoom._Game._Player._Item item) => ItemStates.TryGetValue(item, out var state) && state["gifted"];

    protected override async Task OnInitializedAsync() {
        await JS.InvokeVoidAsync("console.clear");
        _Instance = this;
        ProcessEvent();
        await JS.SetBackgroundImage(await JS.GetElementByClassName("Content"), new(Resources.GetResource("images.screens.room.png")!));
        if (Debug) {
            return;
        }
        try {
            await Firestore.AddTarget($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}");
            await Firestore.AddTarget($"projects/godfield/databases/(default)/documents/modes/hidden/comments/{AppState.RoomId}");
            var channel = await Firestore.GetChannel();
            channel.AddDocumentChangeListener($"projects/godfield/databases/(default)/documents/modes/hidden/rooms/{AppState.RoomId}", RoomDocumentChange);
        } catch (Exception e) {
            await JS.CError(e.ToString());
        }
        if (AppState.HiddenRoomDocument is not null) {
            RoomDocumentChange(AppState.HiddenRoomDocument);
            AppState.HiddenRoomDocument = null;
        }
    }

    async void RoomDocumentChange(JsonDocument document) {
        try {
            await JS.InvokeVoidAsync("console.dir", document.RootElement.Deserialize<object>());
            var room = new HiddenRoom(document);
            if (Room is null) Room = room;
            else if (room?.Game?.Events.Any(x => x.EventName == "startGame") ?? false) return;

            foreach (var e in room!.Game!.Events) {
                EventQueue.Enqueue(e);
                Console.WriteLine($"Event added: {e.EventName}");
            }

            Room = room;
            ProcessEvent();
            StateHasChanged();
        } catch (Exception e) {
            await JS.CError(e.ToString());
        }
    }

    int RandomNextPlayerId() {
        var players = Players!.Where(x => x.Id != LocalPlayer!.Id).ToList();
        return players[new Random().Next(players.Count)].Id;
    }

    void ShowItemDescription(HiddenRoom._Game._Player._Item item) {
        if (!IsItemGifted(item) && (LocalPlayer?.Items.Contains(item) ?? false)) return;
        ShowItemDescription(item.ModelId);
        StateHasChanged();
    }

    async void ShowItemDescription(int modelId) {
        // Sometimes fails...
        try {
            FocusedCard = @<ItemCard ItemDataDefinition=Resources.GetDataDefinitionByModelId(modelId) />;
        } catch (Exception e) {
            await JS.CError(e.ToString());
        }
    }

    async void ItemClick(HiddenRoom._Game._Player._Item item) {
        if (Attacking) {
            if (TurnPlayerSelectedItems.Contains(item)) {
                TurnPlayerSelectedItems.Remove(item);
                await JS.PlayAudio(new(Resources.GetResource("audio.cancel-item.mp3")!));
            } else {
                var dataDef = Resources.GetDataDefinitionByModelId(item.ModelId)!;
                if (dataDef.IsPlusAtk.HasValue && dataDef.IsPlusAtk.Value && TurnPlayerSelectedItems.All(x => Resources.GetDataDefinitionByModelId(x.ModelId)!.Atk.HasValue)) {
                    TurnPlayerSelectedItems.Add(item);
                    await JS.PlayAudio(new(Resources.GetResource("audio.select-item.mp3")!));
                } else {
                    TurnPlayerSelectedItems.Clear();
                    TurnPlayerSelectedItems.Add(item);
                    await JS.PlayAudio(new(Resources.GetResource("audio.select-item.mp3")!));
                }
            }
        } else if (Defending) {
            if (TargetPlayerSelectedItems.Contains(item)) {
                TargetPlayerSelectedItems.Remove(item);
                await JS.PlayAudio(new(Resources.GetResource("audio.cancel-item.mp3")!));
            } else {
                var dataDef = Resources.GetDataDefinitionByModelId(item.ModelId)!;
                if (dataDef.Def.HasValue) {
                    TargetPlayerSelectedItems.Add(item);
                    await JS.PlayAudio(new(Resources.GetResource("audio.select-item.mp3")!));
                }
            }
        }
        StateHasChanged();
    }

    // void HideItemDescription() => FocusedItemDataDefinition = null;

    async void ToggleShowingMiracles() {
        ShowingMiracles = !ShowingMiracles;
        await JS.PlayAudio(new(Resources.GetResource("audio.click.mp3")!));
        StateHasChanged();
    }

    void OnMouseOverCurse(string curse) {
        FocusedCard = @<CurseCard Curse=@curse />;
        StateHasChanged();
    }

    void OnMouseOverGuardian(string guardian) {
        FocusedCard = @<GuardianCard Guardian=@guardian />;
        StateHasChanged();
    }

    void OnMouseOverMiracle(DataDefinition miracle) {
        FocusedCard = @<ItemCard ItemDataDefinition=@miracle />;
        StateHasChanged();
    }

    async void OnPlayerEntryClick(HiddenRoom._Game._Player player) {
        if (Attacking) {
            TargetPlayerId = player.Id;
            var targetingSelf = player.Id == LocalPlayer?.Id;
            ArrowDirection = targetingSelf ? 'L' : 'R';
            if (targetingSelf) TargetPlayerId = -1;
            await JS.PlayAudio(new(Resources.GetResource("audio.target-player.mp3")!));
            StateHasChanged();
        }
    }

    async void TurnPlayerActionFieldClick(HiddenRoom._Game._Player player) {
        try {
            if (Attacking) {
                Console.WriteLine("TurnPlayerActionFieldClick");
                if (TurnPlayerSelectedItems.Count == 0 && (TurnPlayer?.Items.Any(x => Resources.GetDataDefinitionByModelId(x.ModelId)?.IsWeapon(out _) ?? false) ?? false)) {
                    await JS.PlayAudio(new(Resources.GetResource("audio.alert.mp3")!));
                    await JS.Alert(L["texts.alerts.pray"]);
                    return;
                }
                await JS.PlayAudio(new(Resources.GetResource("audio.command.mp3")!));
                await Api.UpdateGame(TurnPlayerSelectedItems.Select(x => x.Id).ToArray(), TargetPlayerId == -1 ? Resources.GetDataDefinitionByModelId(TurnPlayerSelectedItems.First().ModelId)?.IsWeapon(out _) ?? false ? RandomNextPlayerId() : null : TargetPlayerId);
            }
        } catch (Exception e) {
            await JS.CError(e.ToString());
        }
    }

    async void TargetPlayerActionFieldClick(HiddenRoom._Game._Player player) {
        try {
            if (Defending) {
                Console.WriteLine("TargetPlayerActionFieldClick");
                await JS.PlayAudio(new(Resources.GetResource("audio.command.mp3")!));
                await Api.UpdateGame(TargetPlayerSelectedItems.Select(x => x.Id).ToArray());
            }
        } catch (Exception e) {
            await JS.CError(e.ToString());
        }
    }

    void ProcessEvent() {
        // if (ProcessingEventTask?.Status == TaskStatus.WaitingForActivation) {
        //     ProcessingEventTask = null;
        // }
        if (ProcessingEventTask is not null || ProcessingEventTask?.Status == TaskStatus.Running) {
            Console.WriteLine($"TASK ALREADY RUNNING: {ProcessingEventTask}, {ProcessingEventTask?.Status}");
            return;
        }
        ProcessingEventTask = Task.Run(async () => {
            Console.WriteLine("TASK STARTED");
            while (true) {
                try {
                    if (EventQueue.TryDequeue(out var e)) {
                        Console.WriteLine($"Event: {e.EventName}\n{JsonSerializer.Serialize(e.Json.Deserialize<object>())}");
                        switch (e.EventName) {
                            case "startGame": {
                                await Task.Delay(250);
                                await JS.PlayAudio(new(Resources.GetResource("audio.start-game.mp3")!));
                                IsOpening = true;
                                StateHasChanged();
                                await Task.Delay(1500);
                                continue;
                            }
                            case "gift": {
                                if (e.Json.GetProperty("playerId").GetIntValue() != LocalPlayer?.Id) continue;
                                var eItem = new HiddenRoom._Game._Player._Item(e.Json.GetProperty("item").GetMapFieldsValue());
                                var item = LocalPlayer?.Items.FirstOrDefault(x => x.Id == eItem.Id);
                                if (item is null) {
                                    Console.WriteLine($"Unknown item: {eItem.Id}");
                                    continue;
                                }
                                if (!ItemStates.TryGetValue(item, out var state)) ItemStates[item] = state = new();
                                state["gifted"] = true;
                                StateHasChanged();
                                var dataDef = Resources.GetDataDefinitionByModelId(item.ModelId)!;
                                await JS.SetImage(await JS.GetElementById($"Item{item.Id}"), new(dataDef.GetImageStream()));
                                await JS.PlayAudio(new(Resources.GetResource("audio.gift.mp3")!));
                                await Task.Delay(240);
                                // Console.WriteLine($"Gifted item: {eItem.Id}, {dataDef.Name}, {GetTextUnderItem(item.ModelId)}");
                                continue;
                            }
                            case "advanceTurn": {
                                if (IsOpening) {
                                    IsOpening = false;
                                    StateHasChanged();
                                }
                                var playerId = e.Json.GetProperty("playerId").GetIntValue();
                                TurnPlayerId = playerId;
                                StateHasChanged();
                                if (playerId == LocalPlayer?.Id) await JS.PlayAudio(new(Resources.GetResource("audio.start-turn.mp3")!));
                                else await JS.PlayAudio(new(Resources.GetResource("audio.turn-player.mp3")!));
                                continue;
                            }
                            case "useTurnItems": {
                                var items = e.Json.GetProperty("items").GetArrayEnumerator().Select(x => new HiddenRoom._Game._Player._Item(x.GetMapFieldsValue())).ToList();
                                TurnPlayerSelectedItems.Clear();
                                foreach (var item in items) {
                                    TurnPlayerSelectedItems.Add(item);
                                    await JS.PlayAudio(new(Resources.GetResource("audio.select-item.mp3")!));
                                    StateHasChanged();
                                    await Task.Delay(400);
                                }
                                continue;
                            }
                            case "useDefenseItems": {
                                var items = e.Json.GetProperty("items").GetArrayEnumerator().Select(x => new HiddenRoom._Game._Player._Item(x.GetMapFieldsValue())).ToList();
                                TargetPlayerSelectedItems.Clear();
                                foreach (var item in items) {
                                    TargetPlayerSelectedItems.Add(item);
                                    await JS.PlayAudio(new(Resources.GetResource("audio.select-item.mp3")!));
                                    StateHasChanged();
                                    await Task.Delay(400);
                                }
                                continue;
                            }
                            case "setTargetPlayer": {
                                var playerId = e.Json.GetProperty("playerId").GetIntValue();
                                TargetPlayerId = playerId;
                                ArrowDirection = TurnPlayerId == TargetPlayerId && TargetPlayerId == LocalPlayer?.Id ? 'L' : 'R';
                                if (playerId == LocalPlayer?.Id) await JS.PlayAudio(new(Resources.GetResource("audio.start-turn.mp3")!));
                                else await JS.PlayAudio(new(Resources.GetResource("audio.target-player.mp3")!));
                                StateHasChanged();
                                continue;
                            }
                            case "dealDamage": {
                                var damage = e.Json.GetProperty("damage").GetIntValue();
                                ActionFieldRightSide.ShowDamageText(damage);
                                await JS.PlayAudio(new(Resources.GetResource("audio.deal-damage.mp3")!));
                                await Task.Delay(1000);
                                ActionFieldRightSide.ClearBigText();
                                continue;
                            }
                            case "removeCurses": {
                                var curses = e.Json.GetProperty("curses").GetArrayEnumerator().Select(x => x.GetStringValue()!).ToList();
                                continue;
                            }
                            case "boostMP": {
                                var mp = e.Json.GetProperty("mp").GetIntValue();
                                continue;
                            }
                            case "boostHP": {
                                var hp = e.Json.GetProperty("hp").GetIntValue();
                                continue;
                            }
                            case "buy": {
                                var item = new HiddenRoom._Game._Player._Item(e.Json.GetProperty("item").GetMapFieldsValue());
                                continue;
                            }
                            case "canNotBuy": {
                                var item = new HiddenRoom._Game._Player._Item(e.Json.GetProperty("item").GetMapFieldsValue());
                                continue;
                            }
                            case "miss": {
                                var playerId = e.Json.GetProperty("playerId").GetIntValue();
                                continue;
                            }
                            case "safe": {
                                continue;
                            }
                            case "debugAddItem": {
                                if (Room is null) Room = new() { Game = new() };
                                if (LocalPlayer is null) {
                                    Players!.Add(new() { UserId = AppState.LocalId, Name = AppState.UserName, Id = 0, HP = 99 });
                                    Players!.Add(new() { UserId = "debug1", Name = "Debug1", Id = 1, HP = 99 });
                                }
                                var item = new HiddenRoom._Game._Player._Item() { Id = LocalPlayer!.Items.Count, ModelId = e.Json.GetProperty("modelId").GetInt32(), Used = e.Json.TryGetProperty("used", out var used) && used.GetBoolean() };
                                LocalPlayer!.Items.Add(item);
                                if (!ItemStates.TryGetValue(item, out var state)) ItemStates[item] = state = new();
                                state["gifted"] = true;
                                StateHasChanged();
                                var dataDef = Resources.GetDataDefinitionByModelId(item.ModelId)!;
                                await JS.SetImage(await JS.GetElementById($"Item{item.Id}"), new(dataDef.GetImageStream()));
                                await JS.PlayAudio(new(Resources.GetResource("audio.gift.mp3")!));
                                continue;
                            }
                            case "debugFocusItemDefinition": {
                                var modelId = e.Json.GetProperty("modelId").GetInt32();
                                ShowItemDescription(modelId);
                                StateHasChanged();
                                continue;
                            }
                            case "debugAddCurse": {
                                LocalPlayer?.Curses.Add(e.Json.GetProperty("curse").GetString()!);
                                StateHasChanged();
                                continue;
                            }
                            case "debugRemoveCurse": {
                                LocalPlayer?.Curses.Remove(e.Json.GetProperty("curse").GetString()!);
                                StateHasChanged();
                                continue;
                            }
                            case "debugSetGuardian": {
                                if (LocalPlayer is not null) {
                                    LocalPlayer.Guardian = e.Json.GetProperty("guardian").GetString()!;
                                    StateHasChanged();
                                }
                                continue;
                            }
                            case "debugUpdateGame": {
                                await Api.UpdateGame(e.Json.GetProperty("itemIds").Deserialize<int[]>()!, e.Json.TryGetProperty("targetPlayerId", out var targetPlayerId) ? targetPlayerId.GetInt32() : null);
                                continue;
                            }
                            case "debugShowDamage": {
                                ActionFieldRightSide.ShowDamageText(e.Json.TryGetProperty("damage", out var damage) ? damage.GetInt32() : 99);
                                continue;
                            }
                            default: {
                                Console.WriteLine($"Unknown event: {e.EventName}");
                                continue;
                            }
                        }
                    } else {
                        // any better ways?
                        await Task.Delay(100);
                    }
                } catch (Exception e) {
                    await JS.CError(e.ToString());
                }
            }
        });
    }

    // for debug
    [JSInvokable]
    public static void EnqueueEvent(string eventJson) {
        if (_Instance is null) return;
        _Instance.EventQueue.Enqueue(new(JsonSerializer.Deserialize<JsonElement>(eventJson)));
        _Instance.ProcessEvent();
    }
}