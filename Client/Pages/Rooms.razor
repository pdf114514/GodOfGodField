@page "/rooms"

<div class="Rooms">
    <div class="Room Training" @onclick="ButtonTraining">
        <span>@L["texts.modeNames.training"]</span>
        <span>@L["texts.menu.userCount"].Replace("{{count}}", UserCount.Training.ToString())</span>
        <span>@L["texts.modeDescriptions.training"]</span>
    </div>
    <div class="Room Hidden" @onclick="ButtonHidden">
        <span>@L["texts.modeNames.hidden"]</span>
        <span>@L["texts.menu.userCount"].Replace("{{count}}", UserCount.Hidden.ToString())</span>
        <span>@L["texts.modeDescriptions.hidden"]</span>
    </div>
    <div class="Room Duel" @onclick="ButtonDuel">
        <span>@L["texts.modeNames.duel"]</span>
        <span>@L["texts.menu.userCount"].Replace("{{count}}", UserCount.Duel.ToString())</span>
        <span>@L["texts.modeDescriptions.duel"]</span>
    </div>
</div>

@code {
    UserCount UserCount = new() { Duel = -1, Hidden = -1, Training = -1 };

    protected override async Task OnInitializedAsync() {
        await JS.SetBackgroundImage(await JS.GetElementByClassName("Content"), new(Resources.GetResource("images.screens.menu.png")!));
        try {
            UserCount = await Api.GetUserCount();
        } catch {
            await Api.Refresh();
            UserCount = await Api.GetUserCount();
        }
        // await JS.Alert(System.Text.Json.JsonSerializer.Serialize(UserCount));
        StateHasChanged();
    }

    async Task ButtonTraining() {
        await JS.PlayAudio(new(Resources.GetResource("audio.click.mp3")!));
        Navigation.NavigateTo("/rooms/training");
    }

    async Task ButtonHidden() {
        await JS.PlayAudio(new(Resources.GetResource("audio.click.mp3")!));
        Navigation.NavigateTo("/rooms/hidden");
    }

    async Task ButtonDuel() {
        await JS.PlayAudio(new(Resources.GetResource("audio.click.mp3")!));
        Navigation.NavigateTo("/rooms/duel");
    }
}