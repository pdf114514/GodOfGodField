@inherits LayoutComponentBase

<div class="Main">
    <div class="Header">
        <!-- TODO make wrapper div to make button's background ligher when hover -->
        <div class="ButtonClose" @onclick="Close" style="display: @(ShowingReference || !AppState.IsLoginScreen ? "inherit" : "none")">
            <div /><div />
        </div>
        <span></span>
        <!-- TODO make wrapper div to make button's background ligher when hover -->
        <div class="ButtonReference" @onclick="ToggleShowingReference">@L["texts.reference.reference"]</div>
    </div>
    <div class="Content">
        @Body
    </div>
    <div class="Footer">
        <span style="display: @(AppState.IsLoginScreen ? "none" : "inherit")">@AppState.UserName</span>
    </div>
</div>

@code {
    bool ShowingReference = false;

    protected override async Task OnInitializedAsync() {
        await AppState.Load();
        return;
        Navigation.NavigateTo("/");
        // var targetId = await Firestore.AddTarget("projects/godfield/databases/(default)/documents/userCount/data");
        // await Firestore.GetChannel();
        // await Firestore.RemoveTarget(targetId);
    }

    bool S = false;
    Random RNG = new();
    async Task ToggleShowingReference() {
        if (S) {
            var a = typeof(Resources).Assembly;
            var names = a.GetManifestResourceNames().Where(x => x.StartsWith($"{a.GetName().Name}.Resources.audio", true, null)).ToArray();
            await JS.PlayAudio(new(a.GetManifestResourceStream(names[RNG.Next(names.Length)])!));
            return;
        }
        S = true;
        await JS.PlayAudio(new(Resources.GetResource("audio.click.mp3")!));
        // ShowingReference = !ShowingReference;
        await JS.Alert("Not implemented yet");
    }

    async Task Close() {
        await JS.PlayAudio(new(Resources.GetResource("audio.click.mp3")!));
        if (ShowingReference) ShowingReference = false;
        else if (AppState.IsPlaying) {
            await JS.Alert("TODO show exiting game confirmation");
            await JS.InvokeVoidAsync("history.back");
        } else if (Navigation.Uri.EndsWith("/rooms/hidden")) {
            await Api.RemoveRoomUser();
            await Firestore.RemoveAllTargets();
            var channel = await Firestore.GetChannel();
            channel.RemoveAllDocumentChangeListeners();
            channel.RemoveAllDocumentDeleteListeners();
            await JS.InvokeVoidAsync("history.back");
        }
        else await JS.InvokeVoidAsync("history.back");
    }
}